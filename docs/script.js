// Initialization
var mapsPlaceholder = [];
L.Map.addInitHook(function () {
  mapsPlaceholder.push(this);
});
window.chartColors = {
	red: 'rgb(255, 99, 132)',
	orange: 'rgb(255, 159, 64)',
	yellow: 'rgb(255, 205, 86)',
	green: 'rgb(75, 192, 192)',
	blue: 'rgb(54, 162, 235)',
	purple: 'rgb(153, 102, 255)',
	grey: 'rgb(201, 203, 207)'
};   

var fnMapInit = function(idObject = 'map') {
	var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
	var osmAttribution = '&copy; <a href="http://openstreetmap.org/copyright">OpenStreetMap</a> contributors';
	var tiles = L.tileLayer(osmUrl, {
			maxZoom: 18,
			attribution: osmAttribution
		}),
		latlng = L.latLng(-37.82, 175.24);
	var map = L.map(idObject, {center: latlng, zoom: 13, layers: [tiles]});
	return map;
}
var fnMenuNotification = function() {
	$('.notification.item').popup({
		popup: '.popup',
		position: 'bottom right',
		on: 'click'
	});
};
var fnUiCalendarDate = function() {
	$('.ui.calendar.date').calendar({type: 'date'});
};
var fnUiCalendarHeatmap = function(selector, dateData){
	var weeksInMonth = function(month){
		var m = d3.timeMonth.floor(month)
		return d3.timeWeeks(d3.timeWeek.floor(m), d3.timeMonth.offset(m,1)).length;
	}
	var minDate = d3.min(dateData, function(d) { return new Date(d.day) })
	var maxDate = d3.max(dateData, function(d) { return new Date(d.day) })
	var cellMargin = 1, cellSize = 10;

	var day = d3.timeFormat('%w'),
		week = d3.timeFormat('%U'),
		format = d3.timeFormat('%Y-%m-%d'),
		titleFormat = d3.utcFormat('%d/%m/%Y');
		monthName = d3.timeFormat('%B'),
		months = d3.timeMonth.range(d3.timeMonth.floor(minDate), maxDate);

	var svg = d3.select(selector).selectAll('svg')
		.data(months)
		.enter().append('svg')
		.attr('class', 'month')
		.attr('height', ((cellSize * 7) + (cellMargin * 8) + 20) ) // the 20 is for the month labels
		.attr('width', function(d) {
		  var columns = weeksInMonth(d);
		  return ((cellSize * columns) + (cellMargin * (columns + 1)));
		})
		.append('g')

		svg.append('text')
			.attr('class', 'month-name')
			.attr('y', (cellSize * 7) + (cellMargin * 8) + 15 )
			.attr('x', function(d) {
			  var columns = weeksInMonth(d);
			  return (((cellSize * columns) + (cellMargin * (columns + 1))) / 2);
			})
			.attr('text-anchor', 'middle')
			.text(function(d) { 
				return monthName(d);
			})


	var lookup = d3.nest()
		.key(function(d) {
			return d.day;
		})
		.rollup(function(leaves) {
			return d3.sum(leaves, function(d){
				return parseInt(d.count);
			});
		})
		.object(dateData);
		
	var rect = svg.selectAll('rect.day')
		.data(function(d, i) { 
			return d3.timeDays(d, new Date(d.getFullYear(), d.getMonth()+1, 1));
		})
		.enter().append('rect')
		.attr('class', 'day')
		.attr('width', cellSize)
		.attr('height', cellSize)
		.attr('rx', 3).attr('ry', 3) // rounded corners
		.attr('fill', '#eaeaea') 	// default light grey fill
		.attr('y', function(d) {
			return (day(d) * cellSize) + (day(d) * cellMargin) + cellMargin;
		})
		.attr('x', function(d) {
			return ((week(d) - week(new Date(d.getFullYear(),d.getMonth(),1))) * cellSize) + ((week(d) - week(new Date(d.getFullYear(),d.getMonth(),1))) * cellMargin) + cellMargin ;
		})
		.on('mouseover', function(d) {
			d3.select(this).classed('hover', true);
		})
		.on('mouseout', function(d) {
			d3.select(this).classed('hover', false);
		})
		.on('click', function(d) {
			var date = new Date(d);
			$('#date').html(date.toLocaleDateString());
			$('#numActivities').html(lookup[d]);
		})
		.datum(format);

		rect.append('title')
			.text(function(d) {
				return titleFormat(new Date(d)) + ' : ' + lookup[d];
			});

	var scale = d3.scaleLinear()
		.domain(d3.extent(dateData, function(d) {
			return parseInt(d.count);
		}))
		.range([0.4,1]); // the interpolate used for color expects a number in the range [0,1] but i don't want the lightest part of the color scheme

	rect.filter(function(d) {
			return d in lookup;
		})
		.style('fill', function(d) {
			return d3.interpolatePuBu(scale(lookup[d]));
		});
}
var fnUiCalendarTime = function() {
	$('.ui.calendar.time').calendar({type: 'time'});
};
var fnUiCheckbox = function() {
	$('.ui.checkbox').checkbox();
};
var fnUiDropdown = function() {
	$('.ui.dropdown').dropdown();
};
var fnUiTab = function() {
	$('.ui.menu .item').tab();
};
var fnUiTable = function() {
	$('table.sortable').tablesort();
};

var fnPageActivities = function() {
	fnMenuNotification();
	
	$('.ui.dropdown').dropdown({
		onChange: function(value, text, $selectedItem) {
		  // Calendar
		  $('#calendar').fullCalendar("destroy");
		  $('#calendar').hide();
		  // List
		  $('#list').hide();
		  // Map
		  var map = mapsPlaceholder.pop();
		  if (typeof map === 'object') {
			map.remove();
		  }
		  $('#map').hide();
		  // 
		  switch(value) {
			case 'calendar':
				$('#calendarList').fullCalendar({
				  events: [
					{
					  title: 'Event Title1',
					  start: '2018-12-17T13:13:55.008',
					  end: '2018-12-19T13:13:55.008'
					},
					{
					  title: 'Event Title2',
					  start: '2018-12-12T13:13:55-0400',
					  end: '2018-12-12T13:13:55-0400'
					}
				  ]
				})
				$('#calendar').show();
				break;
			case 'list':
				$('#list').show();
				
				var map = fnMapInit('mapListItem');
				var runLayer = omnivore.gpx('run.gpx')
					.on('ready', function() {
						map.fitBounds(runLayer.getBounds());
					})
					.addTo(map);
				break;
			case 'map':
				$('#map').show();
				var map = fnMapInit('mapListGlobal');
				var markers = L.markerClusterGroup();
				//An extract of address points from the LINZ bulk extract: http://www.linz.govt.nz/survey-titles/landonline-data/landonline-bde
				//Should be this data set: http://data.linz.govt.nz/#/layer/779-nz-street-address-electoral/
				var addressPoints = [
					[-37.8210922667, 175.2209316333, "2"],
					[-37.8210819833, 175.2213903167, "3"],
					[-37.8210881833, 175.2215004833, "3A"],
					[-37.8211946833, 175.2213655333, "1"],
					[-37.8209458667, 175.2214051333, "5"],
					[-37.8208292333, 175.2214374833, "7"],
					[-37.8325816, 175.2238798667, "537"],
					[-37.8315855167, 175.2279767, "454"],
					[-37.8096336833, 175.2223743833, "176"],
					[-37.80970685, 175.2221815833, "178"],
					[-37.8102146667, 175.2211562833, "190"],
					[-37.8088037167, 175.2242227, "156"],
					[-37.8112330167, 175.2193425667, "210"],
					[-37.8116368667, 175.2193005167, "212"],
					[-37.80812645, 175.2255449333, "146"],
					[-37.8080231333, 175.2286383167, "125"],
					[-37.8089538667, 175.2222222333, "174"],
					[-37.8080905833, 175.2275400667, "129"],
					[-37.808811, 175.2227592833, "172"],
					[-37.80832975, 175.2276898167, "131"],
					[-37.8089395333, 175.2281710333, "133"],
					[-37.8093421, 175.2274883167, "135"],
					[-37.8084820833, 175.22601925, "137"],
					[-37.80881015, 175.22622865, "139"],
					[-37.8090947667, 175.2263585667, "141"],
					[-37.8092962333, 175.2244872333, "147"],
					[-37.8091016667, 175.2249140167, "145"],
					[-37.8088785167, 175.2253611667, "143"],
					[-37.80825965, 175.22530115, "148"],
					[-37.80995685, 175.2238554333, "153"],
					[-37.80975435, 175.2238417833, "151"],
					[-37.80950755, 175.2237912, "149"],
					[-37.8092772667, 175.2231980833, "170"],
					[-37.8082753833, 175.20672975, "4"],
					[-37.8078434833, 175.211822, "56"],
					[-37.8083775667, 175.2090812333, "30B"],
					[-37.8084588, 175.2058838167, "174"],
					[-37.8088788333, 175.2062702833, "175"],
					[-37.8091632833, 175.20514875, "182A"],
					[-37.8094891167, 175.20384695, "202"],
					[-37.8156715667, 175.2034881667, "277"],
					[-37.8109189333, 175.2024631, "220"],
					[-37.8108164333, 175.2039622, "219"],
					[-37.8125773667, 175.2026079667, "238"],
					[-37.8125799333, 175.2032824, "241A"],
					[-37.8125869, 175.2037423833, "241C"],
					[-37.8140266833, 175.2025706, "256"],
					[-37.80932, 175.2051094333, "182B"],
					[-37.8098799667, 175.2040444167, "197"],
					[-37.8094298833, 175.20561245, "189"],
					[-37.8172409333, 175.2035291167, "287"],
					[-37.8232166667, 175.22452865, "2028"],
					[-37.8225024333, 175.2249944667, "2022"],
					[-37.82334135, 175.2244748667, "2030"],
					[-37.8229725333, 175.2246809333, "2026"],
					[-37.8224034667, 175.22507345, "2020"],
					[-37.8227806, 175.2248285833, "2024"],
					[-37.8178801, 175.2181871667, "6"],
					[-37.81811315, 175.2180543667, "4"],
					[-37.8181739833, 175.21851995, "1"],
					[-37.81797515, 175.2186312, "3"],
					[-37.8181787, 175.2176995, "2A"],
					[-37.8183385333, 175.21812895, "2"],
					[-37.8293053167, 175.2105357833, "31"],
					[-37.8309444333, 175.21208735, "16"],
					[-37.8306726667, 175.2115020833, "19"],
					[-37.8300903, 175.2120791, "26"],
					[-37.8289416167, 175.2113778333, "33"],
					[-37.8274969167, 175.2113355167, "53"],
					[-37.8199192667, 175.2173622833, "5A"],
					[-37.8200392833, 175.2174100167, "3"],
					[-37.8196328, 175.2167642, "18"],
					[-37.81752585, 175.2155467667, "22C"],
					[-37.81766615, 175.2153714167, "22B"],
					[-37.8179022667, 175.2151616833, "22A"],
					[-37.8191980333, 175.21664245, "20A"],
					[-37.81799325, 175.21565925, "20C"],
					[-37.8187486333, 175.2165228667, "20B"],
					[-37.81964875, 175.2172874167, "7"],
					[-37.81925545, 175.2171617, "11"],
					[-37.8190491667, 175.2170928333, "13"],
					[-37.8194515667, 175.2172147167, "9"],
					[-37.81981045, 175.21733245, "5B"],
					[-37.81876595, 175.2172445167, "15B"],
					[-37.8185999167, 175.2172441, "17A"],
					[-37.81816745, 175.21725905, "21B"],
					[-37.8182157167, 175.2164626333, "24"],
					[-37.8180109667, 175.2173984167, "23A"],
					[-37.8179918, 175.217159, "23B"],
					[-37.8188473167, 175.2170330333, "15"],
					[-37.8186481333, 175.2169800667, "17"],
					[-37.8184132, 175.2169327333, "19"],
					[-37.8202288333, 175.2174746333, "1"],
					[-37.818193, 175.2169955667, "21"],
					[-37.8178000833, 175.21733275, "25"],
					[-37.8176839, 175.2168488333, "26"],
					[-37.8198172, 175.2204960667, "5"],
					[-37.819986, 175.22049635, "3"],
					[-37.8197666, 175.2200825, "4"],
					[-37.8193835833, 175.2191669667, "10"],
					[-37.8193426333, 175.2198626667, "11"],
					[-37.8192171667, 175.2191711, "12"],
					[-37.8192621333, 175.2196364167, "13"],
					[-37.8195289667, 175.2193943167, "8"],
					[-37.81946, 175.2201499167, "9"],
					[-37.8196037833, 175.219674, "6"],
					[-37.8194712, 175.2204032, "7A"],
					[-37.8196381, 175.2203709333, "7"],
					[-37.8200137667, 175.2201364333, "2"],
					[-37.8191725167, 175.2193772833, "14"],
					[-37.8214417333, 175.2256822167, "4"],
					[-37.8210291, 175.2259429667, "8"],
					[-37.8212328333, 175.2258132, "6"],
					[-37.8216819833, 175.2253209, "3"],
					[-37.8334697167, 175.2038651667, "326"],
					[-37.8322603667, 175.2028621167, "317"],
					[-37.8322013667, 175.2046802667, "1/341"],
					[-37.8320576167, 175.2165535833, "435"],
					[-37.8319540333, 175.20506915, "2/341"],
					[-37.8316975667, 175.2053442333, "3/341"],
					[-37.8328229833, 175.2062598, "346"],
					[-37.83161565, 175.2074915, "355"],
					[-37.83219305, 175.20629425, "347"],
					[-37.8328549, 175.2080619667, "362"],
					[-37.8321289667, 175.2084019333, "367"],
					[-37.8322225167, 175.2120427667, "397"],
					[-37.8321649, 175.21119325, "393"],
					[-37.8321458833, 175.2131246333, "407"],
					[-37.8327043833, 175.21377405, "416"],
					[-37.8321267167, 175.2144058167, "417"],
					[-37.83212555, 175.2096521333, "373"],
					[-37.8331028667, 175.20928495, "366"],
					[-37.82866875, 175.22177625, "563"],
					[-37.8295602, 175.21924335, "582"],
					[-37.8304707833, 175.2182986167, "590"],
					[-37.83086, 175.2180687667, "592"],
					[-37.8328604833, 175.2172892167, "618"],
					[-37.8342575667, 175.2168357833, "638"],
					[-37.8239713, 175.2245693667, "504"],
					[-37.8365260167, 175.2170911, "673"],
					[-37.8233928833, 175.2249669167, "492"],
					[-37.8248650167, 175.2246300833, "509"],
					[-37.8191798333, 175.2265331667, "435"],
					[-37.8143243333, 175.2310940167, "368"],
					[-37.81459255, 175.2320046, "363"],
					[-37.81127515, 175.2356499167, "311"],
					[-37.8126359667, 175.2340855167, "333"],
					[-37.8096158333, 175.2375218167, "293"],
					[-37.8315868667, 175.2177722833, "604"],
					[-37.8160177667, 175.2299268333, "391"],
					[-37.8204715667, 175.2265481833, "456"],
					[-37.8206352, 175.2265670333, "458"],
					[-37.8208412667, 175.2265323333, "460"],
					[-37.8210184333, 175.22648325, "462"],
					[-37.8212643833, 175.2270422167, "465"],
					[-37.82119945, 175.2264274333, "464"],
					[-37.82136485, 175.2263145667, "466"],
					[-37.8215261, 175.22684075, "467"],
					[-37.8215301833, 175.2262078, "468"],
					[-37.8217701667, 175.2266360167, "1/471"],
					[-37.8218376833, 175.22686725, "2/471"],
					[-37.8217084667, 175.2260839667, "472"],
					[-37.8219782333, 175.2265028333, "475"],
					[-37.8218988833, 175.2259723, "476"],
					[-37.8223939333, 175.2262447, "479"],
					[-37.8223048667, 175.2256582833, "480"],
					[-37.8226657, 175.2261230833, "481"],
					[-37.8224199, 175.2255487833, "482"],
					[-37.8229134167, 175.2259527833, "485"],
					[-37.8226937833, 175.2253693167, "486"],
					[-37.8231509667, 175.2258170333, "487"],
					[-37.82295265, 175.2252571167, "488"],
					[-37.8233779, 175.2256743833, "489"],
					[-37.8232052667, 175.2251109333, "490"],
					[-37.8236200333, 175.22553395, "493"],
					[-37.82385775, 175.2253390833, "495"],
					[-37.8203220167, 175.22650925, "454"],
					[-37.8179795333, 175.2262826, "428"],
					[-37.81038215, 175.2365298167, "303"],
					[-37.8161746667, 175.2297239833, "393"],
					[-37.8083635333, 175.233955, "294"],
					[-37.82029495, 175.2214968167, "39"],
					[-37.8204754333, 175.2247793333, "12B"],
					[-37.8205440833, 175.22344905, "23"],
					[-37.8195974333, 175.2254019333, "2"],
					[-37.8210801, 175.2237748667, "20A"],
					[-37.8209057333, 175.22389775, "18"],
					[-37.8208016833, 175.2221582833, "32"],
					[-37.8209372667, 175.2236919, "20"],
					[-37.8210586833, 175.22351925, "22B"],
					[-37.82092905, 175.2234855333, "22"],
					[-37.8208587333, 175.2231887667, "24"],
					[-37.8210241167, 175.2230882, "24B"],
					[-37.8208547833, 175.2229410667, "26"],
					[-37.8209917, 175.2228447667, "26B"],
					[-37.82097645, 175.2227176167, "28B"],
					[-37.8208099167, 175.2226765167, "28"],
					[-37.8207666833, 175.2224338833, "30"],
					[-37.8209508833, 175.2222094167, "32B"],
					[-37.82076515, 175.2219195167, "34A"],
					[-37.8207399667, 175.2218131667, "34B"],
					[-37.8203075833, 175.2240482833, "19"],
					[-37.8205368167, 175.2237746667, "21"],
					[-37.8205025833, 175.2231658, "25A"],
					[-37.820465, 175.2229733667, "27"],
					[-37.82043535, 175.2227387, "29"],
					[-37.8204582, 175.2225319667, "31"],
					[-37.82024115, 175.2224347833, "31B"],
					[-37.8203792333, 175.2222631667, "33"],
					[-37.82034095, 175.2219843, "35"],
					[-37.8201566167, 175.2219446, "35B"],
					[-37.82030575, 175.2217594333, "37"],
					[-37.8202966833, 175.2233158167, "25"],
					[-37.8192714167, 175.2253842667, "1"],
					[-37.81969695, 175.22516645, "4"],
					[-37.8194904667, 175.22468815, "5"],
					[-37.8198524333, 175.2249096667, "6"],
					[-37.8200581833, 175.2247122, "8"],
					[-37.8193447, 175.2244639667, "5C"],
					[-37.8208238, 175.2241340167, "16"],
					[-37.8193183667, 175.22515695, "1A"],
					[-37.81940575, 175.2249383333, "3"],
					[-37.8211855167, 175.2242545333, "18A"],
					[-37.8207094833, 175.22430275, "14"],
					[-37.82027725, 175.22488135, "10A"],
					[-37.8202305833, 175.2245652667, "10"],
					[-37.8205049667, 175.2244201333, "12"],
					[-37.8196320333, 175.2255586, "22"],
					[-37.8209711, 175.2250444667, "8"],
					[-37.82120665, 175.2252942833, "5"],
					[-37.8210184, 175.2254290333, "7"],
					[-37.8213430333, 175.2252086167, "3"],
					[-37.8207887833, 175.2251555667, "10"],
					[-37.82060805, 175.2257042333, "13"],
					[-37.8208330333, 175.22553905, "9"],
					[-37.8216988833, 175.2249665667, "1"],
					[-37.8215665833, 175.2246573333, "2"],
					[-37.8213729, 175.2247789333, "4"],
					[-37.8211700667, 175.2249324333, "6"],
					[-37.8205967667, 175.2252867, "12"],
					[-37.8204008833, 175.2254234667, "14"],
					[-37.82043265, 175.22582195, "15"],
					[-37.8202037333, 175.2255415833, "16"],
					[-37.8200154333, 175.2256547667, "18"],
					[-37.8197443167, 175.2256164833, "20"],
					[-37.8202814333, 175.22590955, "17"],
					[-37.8202967667, 175.21462555, "98"],
					[-37.82204485, 175.21819735, "61B"],
					[-37.8224241, 175.2179326667, "61C"],
					[-37.8215043167, 175.2227943833, "24"],
					[-37.8219082, 175.2255408167, "8"],
					[-37.8216963, 175.2240856667, "14"],
					[-37.8213418333, 175.2188135667, "55"],
					[-37.8204966333, 175.2183406333, "54A"],
					[-37.8221799833, 175.21122085, "139"],
					[-37.8217387, 175.22431625, "12"],
					[-37.8218650167, 175.2149734167, "107"],
					[-37.8214083333, 175.2220152667, "30"],
					[-37.8213738333, 175.2217301, "32"],
					[-37.8221598167, 175.2247839333, "9"],
					[-37.8216356, 175.2235610667, "18"],
					[-37.8212188167, 175.2221387333, "30B"],
					[-37.8200466667, 175.2166111, "84A"],
					[-37.8216679333, 175.2238393333, "16"],
					[-37.8211582833, 175.22031685, "34"],
					[-37.8221918667, 175.2250378333, "7"],
					[-37.8187410167, 175.2067290167, "170C"],
					[-37.8206532, 175.2170745667, "81"],
					[-37.8212348667, 175.2181024167, "67"],
					[-37.8213057667, 175.2185351167, "57"],
					[-37.8214571, 175.2145877333, "110"],
					[-37.82207085, 175.2136727167, "121"],
					[-37.82190125, 175.2123493, "130"],
					[-37.8207519667, 175.2102467333, "150"],
					[-37.8212159, 175.2096407, "159"],
					[-37.8208313833, 175.2067756, "172"],
					[-37.8214413333, 175.2222779833, "28"],
					[-37.8206921333, 175.2182549, "54"],
					[-37.82043975, 175.2181215, "56"],
					[-37.8218791, 175.2252452167, "10"],
					[-37.82029435, 175.2169818, "84"],
					[-37.8215885167, 175.22308725, "22"],
					[-37.8215897333, 175.2233113167, "20"],
					[-37.82167455, 175.2183345, "61A"],
					[-37.8217164667, 175.2179857333, "63"],
					[-37.82147385, 175.22253565, "26"],
					[-37.8206765333, 175.2160304333, "86"],
					[-37.8188941, 175.2069437, "170A"],
					[-37.8188068333, 175.2068104833, "170B"],
					[-37.8193742667, 175.2085580333, "170"],
					[-37.8214388167, 175.2200072, "45"],
					[-37.8209547167, 175.2157149167, "92"],
					[-37.82088565, 175.2164849333, "85"],
					[-37.82136235, 175.2159546667, "97"],
					[-37.8219607333, 175.2232987, "19"],
					[-37.8210501, 175.2179753833, "69"],
					[-37.8212466667, 175.2222175833, "28A"],
					[-37.8213836167, 175.22300555, "22A"],
					[-37.821339, 175.2227439167, "24A"],
					[-37.8208144333, 175.2173117167, "77"],
					[-37.8189363667, 175.2211582333, "25"],
					[-37.8196676167, 175.2209947333, "26B"],
					[-37.8194113, 175.2211991, "26"],
					[-37.81883205, 175.2209747, "27"],
					[-37.8186925833, 175.2207728833, "29"],
					[-37.8199931833, 175.2240802167, "2"],
					[-37.8191759333, 175.2208279333, "30"],
					[-37.81835395, 175.2196571667, "39"],
					[-37.8198807333, 175.2235938167, "6"],
					[-37.8194567833, 175.22349015, "7"],
					[-37.8200507833, 175.21933875, "58"],
					[-37.8197902167, 175.2182408, "59A"],
					[-37.81991635, 175.21797195, "59B"],
					[-37.8198223833, 175.2179361833, "59C"],
					[-37.8201049333, 175.2197347167, "60"],
					[-37.8199380333, 175.21836645, "61A"],
					[-37.82003775, 175.2182443833, "61B"],
					[-37.8200944167, 175.21803015, "61C"],
					[-37.8201259667, 175.2185610667, "63"],
					[-37.82026275, 175.2188001167, "65"],
					[-37.8188917833, 175.2203729333, "34"],
					[-37.8184921333, 175.2203832, "33"],
					[-37.8190387167, 175.2206181333, "32"],
					[-37.81968705, 175.2224253667, "16"],
					[-37.81981205, 175.223119, "10"],
					[-37.8193882833, 175.2229798333, "11"],
					[-37.8190901167, 175.2227829833, "13B"],
					[-37.8193593, 175.2227247833, "13"],
					[-37.81993935, 175.2226893333, "14B"],
					[-37.81842725, 175.2201474167, "35"],
					[-37.8187965833, 175.2200475333, "36"],
					[-37.8183878167, 175.2198735667, "37"],
					[-37.8188702167, 175.2196982333, "38B"],
					[-37.82027885, 175.2209890667, "82"],
					[-37.8199839667, 175.2190668, "56"],
					[-37.8187008333, 175.21973745, "38A"],
					[-37.8196820167, 175.22262455, "14"],
					[-37.8186528333, 175.2191018, "42"],
					[-37.8182912167, 175.21915535, "43"],
					[-37.81870525, 175.21945675, "40"],
					[-37.8195044333, 175.2214081833, "24"],
					[-37.81857075, 175.2205925167, "31"],
					[-37.8195656167, 175.2181396, "57"],
					[-37.8198411667, 175.2213911167, "24A"],
					[-37.8195851667, 175.2240869667, "3"],
					[-37.8192829167, 175.2239720167, "3A"],
					[-37.8193257, 175.2224725667, "15"],
					[-37.8197290167, 175.2224129833, "16A"],
					[-37.8196499333, 175.2221262667, "18"],
					[-37.8196755333, 175.2243193333, "1"],
					[-37.8192091667, 175.22166805, "21"],
					[-37.81957585, 175.22166585, "22"],
					[-37.8199106833, 175.2238436, "4"],
					[-37.81953715, 175.22372785, "5A"],
					[-37.8193377833, 175.22378105, "5"],
					[-37.8189702833, 175.2184597333, "46"],
					[-37.8185876167, 175.21821495, "47A"],
					[-37.8185706333, 175.2178869167, "47B"],
					[-37.8191945667, 175.21845965, "48"],
					[-37.8188482167, 175.2176680833, "49"],
					[-37.8194043667, 175.21852395, "50"],
					[-37.8196233333, 175.2186248333, "52"],
					[-37.81920055, 175.2179787167, "53"],
					[-37.8198255, 175.2188011167, "54"],
					[-37.8205994333, 175.2207248667, "81"],
					[-37.8193045333, 175.2222075667, "17"],
					[-37.8205621167, 175.2204520167, "79"],
					[-37.8180799333, 175.2194407, "41A"],
					[-37.8208301833, 175.2206735833, "81A"],
					[-37.8202558, 175.2206809333, "80"],
					[-37.81941275, 175.21804965, "55"],
					[-37.8190239, 175.2179808833, "51"],
					[-37.8187854, 175.2180712167, "47"],
					[-37.8187476667, 175.2186516333, "44"],
					[-37.8182977, 175.21889655, "45"],
					[-37.81831675, 175.2194069833, "41"],
					[-37.8192735167, 175.2219502167, "19"],
					[-37.8196219167, 175.22189825, "20"],
					[-37.81962665, 175.2216432667, "22A"],
					[-37.8192782833, 175.2209942, "28"],
					[-37.8208129833, 175.2209176833, "83A"],
					[-37.8206351167, 175.2209705667, "83"],
					[-37.8203109333, 175.2212402667, "84"],
					[-37.81909575, 175.22139795, "23"],
					[-37.8197787167, 175.2228814, "12"],
					[-37.8195628333, 175.21791605, "57A"],
					[-37.8198373833, 175.2233606833, "8"],
					[-37.8194342167, 175.22322975, "9"]
				];
				for (var i = 0; i < addressPoints.length; i++) {
					var a = addressPoints[i];
					var title = a[2];
					var marker = L.marker(new L.LatLng(a[0], a[1]), { title: title });
					marker.bindPopup(title);
					markers.addLayer(marker);
				}
				map.addLayer(markers);
				break;
		  }
		}
	});
	$('.ui.dropdown').dropdown('set selected', 'list');
}
var fnPageActivity = function() {
	fnMenuNotification();
	fnUiTab();

	var map = fnMapInit('mapActivity');
	
	var runLayer = omnivore.gpx('run.gpx')
		.on('ready', function() {
			map.fitBounds(runLayer.getBounds());
		})
		.addTo(map);
	
	window.dataJson = {
		"time":[0,1,5,6,8,10,11,12,13,14,15,16,17,19,20,24,25,27,31,34,38,39,40,42,46,47,50,54,58,62,63,64,68,72,75,77,81,84,88,90,92,93,94,98,102,105,109,111,113,117,120,124,125,127,129,133,137,141,145,149,153,157,160,164,168,172,173,177,180,181,185,189,193,196,200,204,208,212,216,219,223,227,229,233,237,239,242,244,246,248,250,253,256,260,264,268,272,276,280,284,288,289,293,295,298,300,302,306,310,311,315,319,323,325,329,333,337,341,345,349,352,356,359,363,367,371,375,377,381,385,389,393,394,398,401,403,407,411,415,416,420,421,425,429,431,432,436,438,442,444,446,450,453,454,458,462,466,470,473,474,478,482,486,490,492,496,500,504,508,512,513,517,521,525,529,533,537,541,542,546,550,553,557,561,565,569,573,576,578,580,582,586,588,592,596,598,600,604,608,612,616,620,624,627,631,633,637,641,645,649,653,656,660,661,663,667,671,675,676,680,684,685,689,691,693,697,701,705,709,713,717,720,723,725,730,735,737,742,746,750,754,758,760,764,768,772,773,775,777,779,783,787,791,795,799,803,807,811,815,818,822,826,830,834,838,843,844,848,852,856,860,864,866,868,870,872,874,878,882,886,889,893,897,901,903,906,910,912,918,923,927,930,934,935,939,943,944,948,950,953,957,961,965,966,970,974,978,980,984,988,992,997,1001,1004,1008,1010,1014,1018,1019,1021,1023,1027,1029,1033,1037,1041,1045,1049,1053,1057,1061,1065,1069,1073,1077,1081,1085,1089,1093,1097,1101,1102,1104,1106,1110,1114,1117,1121,1123,1125,1127,1131,1134,1138,1141,1145,1149,1153,1157,1161,1165,1167,1169,1170,1172,1176,1177,1181,1185,1187,1191,1193,1197,1201,1202,1206,1211,1213,1215,1219,1223,1227,1229,1233,1237,1241,1245,1249,1253,1257,1261,1265,1266,1269,1271,1275,1280,1283,1287,1291,1295,1300,1302,1306,1310,1314,1318,1322,1326,1330,1334,1338,1342,1346,1350,1354,1359,1363,1367,1371,1375,1379,1383,1387,1391,1395,1399,1403,1407,1411,1415,1419,1423,1427,1431,1433,1435,1437,1439,1441,1443,1447,1451,1455,1456,1460,1461,1465,1469,1473,1477,1481,1485,1487,1491,1495,1500,1505,1509,1514,1518,1522,1526,1530,1534,1538,1541,1545,1549,1553,1557,1561,1565,1569,1573,1577,1581,1585,1589,1592,1597,1601,1605,1610,1611,1615,1617,1622,1623,1626,1630,1634,1638,1642,1647,1649,1653,1657,1661,1665,1667,1669,1672,1673,1674,1676,1680,1685,1690,1695,1700,1704,1709,1711,1716,1718,1722,1725,1727,1731,1735,1739,1743,1747,1751,1755,1759,1763,1765,1768,1773,1777,1781,1785,1789,1793,1797,1798,1802,1804,1806,1808,1810,1814,1818,1819,1823,1825,1828,1832,1836,1840,1842,1843,1847,1851,1855,1859],
		"distance":[0.0,3.5,27.4,34.5,48.3,61.9,68.7,75.4,82.1,88.8,95.0,101.1,107.0,118.3,124.0,146.4,151.7,162.5,185.2,202.6,226.6,232.4,238.2,249.3,272.4,278.3,295.3,317.3,339.7,362.0,367.5,373.0,395.3,417.1,434.2,445.4,467.5,483.6,505.3,515.5,524.9,529.5,534.1,554.3,574.8,591.2,612.8,623.3,634.0,654.5,669.3,690.6,695.9,707.1,718.8,741.6,764.0,786.5,808.9,831.3,853.1,875.0,892.0,913.8,936.2,957.9,963.2,985.0,1001.1,1006.7,1029.1,1051.9,1074.1,1090.4,1112.3,1134.6,1157.7,1180.3,1203.0,1219.4,1241.4,1263.8,1274.3,1296.4,1317.9,1328.9,1345.2,1355.6,1365.4,1378.6,1391.2,1409.8,1428.8,1454.2,1475.4,1498.9,1521.7,1544.2,1566.9,1590.4,1612.4,1618.0,1641.0,1651.3,1666.4,1678.1,1687.9,1710.1,1732.4,1737.9,1759.9,1782.2,1805.4,1816.7,1838.9,1861.7,1884.5,1906.7,1927.3,1948.2,1964.7,1987.7,2004.5,2027.0,2048.6,2070.4,2092.1,2103.0,2124.6,2145.7,2167.9,2189.2,2194.5,2215.7,2231.3,2241.8,2266.8,2292.2,2317.2,2322.7,2344.5,2350.2,2371.9,2393.3,2402.8,2407.4,2427.9,2438.1,2459.3,2469.4,2480.0,2501.0,2515.9,2521.2,2542.9,2564.1,2585.2,2607.0,2624.0,2629.9,2652.9,2674.8,2697.2,2717.7,2728.2,2750.6,2773.1,2794.7,2816.5,2837.4,2842.6,2863.4,2885.7,2908.6,2931.4,2953.6,2976.1,2998.2,3003.6,3026.4,3049.2,3067.3,3089.5,3112.5,3134.7,3157.7,3180.0,3196.5,3207.1,3216.6,3228.6,3253.5,3265.3,3289.1,3312.4,3323.0,3334.6,3358.6,3381.4,3403.9,3426.9,3450.4,3473.3,3490.4,3512.3,3522.7,3543.4,3564.9,3589.0,3613.0,3635.7,3651.9,3672.4,3677.4,3687.4,3710.3,3733.2,3756.2,3762.5,3785.3,3807.1,3813.1,3835.9,3846.5,3856.4,3877.9,3899.5,3921.8,3944.1,3964.3,3984.8,4000.7,4016.1,4026.1,4050.4,4074.0,4082.8,4108.4,4134.2,4157.2,4178.5,4200.1,4211.4,4232.2,4253.2,4275.2,4281.2,4293.5,4305.3,4317.4,4341.3,4364.5,4387.1,4409.1,4431.1,4453.9,4475.5,4498.0,4520.0,4536.6,4558.1,4580.3,4601.5,4623.3,4644.8,4669.6,4675.2,4696.3,4716.5,4738.1,4760.5,4782.1,4795.4,4808.0,4820.7,4833.4,4845.3,4868.0,4891.8,4916.3,4931.8,4953.0,4971.3,4992.0,5004.2,5021.5,5044.0,5054.3,5078.5,5103.3,5129.3,5150.5,5176.4,5182.5,5206.1,5228.5,5234.3,5257.5,5268.5,5282.6,5304.0,5328.8,5353.5,5359.0,5381.4,5403.6,5425.0,5436.7,5458.1,5479.5,5500.2,5524.5,5546.0,5561.4,5583.3,5594.5,5618.5,5641.1,5646.9,5657.3,5667.9,5688.0,5698.4,5720.1,5741.3,5763.1,5785.4,5807.4,5829.5,5851.7,5874.9,5896.3,5917.6,5939.5,5961.6,5983.4,6005.2,6026.1,6047.5,6069.2,6089.2,6093.2,6103.0,6113.8,6134.4,6155.5,6171.3,6192.8,6204.5,6217.4,6230.4,6253.9,6270.5,6293.0,6307.3,6331.1,6354.0,6376.1,6397.5,6418.9,6439.4,6448.9,6457.1,6462.6,6473.2,6497.8,6504.1,6528.6,6551.1,6561.6,6583.1,6593.3,6615.6,6637.8,6643.7,6667.0,6691.8,6701.6,6711.9,6733.0,6754.4,6776.6,6787.8,6809.6,6830.5,6851.0,6872.6,6893.5,6914.0,6934.8,6955.4,6975.4,6981.3,7000.4,7012.2,7033.5,7059.7,7075.7,7098.8,7122.0,7143.3,7167.2,7179.0,7202.0,7225.8,7247.6,7268.4,7289.3,7310.3,7331.5,7354.5,7377.0,7399.5,7420.2,7441.9,7462.2,7487.0,7506.4,7526.9,7547.6,7568.5,7590.3,7611.6,7632.8,7655.1,7676.4,7696.6,7717.1,7738.0,7759.1,7781.6,7804.0,7827.1,7849.6,7871.7,7881.1,7890.1,7900.0,7912.5,7924.6,7936.1,7960.1,7983.2,8005.8,8011.1,8032.3,8037.8,8059.3,8080.3,8101.4,8122.4,8143.2,8164.2,8174.6,8194.8,8215.4,8240.4,8265.4,8285.9,8310.4,8332.3,8353.6,8374.5,8395.2,8415.9,8437.3,8452.4,8472.6,8493.4,8514.4,8534.7,8556.5,8577.6,8598.4,8619.4,8639.7,8660.5,8680.7,8701.9,8716.7,8741.4,8762.1,8783.1,8806.9,8811.8,8831.6,8841.6,8866.5,8871.2,8886.5,8906.5,8926.5,8947.5,8968.1,8992.8,9002.7,9023.5,9042.8,9063.8,9085.2,9095.3,9104.3,9119.3,9124.1,9129.0,9139.2,9159.8,9184.9,9205.6,9230.6,9255.4,9277.5,9302.0,9313.6,9333.5,9344.0,9367.3,9383.4,9391.7,9600.5,9435.2,9458.8,9481.1,9502.0,9522.4,9543.0,9563.4,9584.5,9592.7,9605.5,9628.6,9651.5,9674.4,9698.4,9722.1,9745.1,9766.7,9772.0,9792.5,9802.6,9814.5,9827.7,9839.5,9861.3,9882.9,9888.1,9909.5,9920.2,9935.3,9955.1,9978.3,10000.9,10011.8,10017.1,10038.3,10059.7,10081.3,10098.8],
		"altitude":[31.4,31.6,31.4,31.4,30.8,30.8,31.2,31.2,31.4,31.2,31.4,31.0,31.2,31.0,31.2,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,30.8,30.6,30.6,30.6,30.4,30.2,30.2,30.0,30.0,29.6,29.6,29.4,29.4,29.4,29.4,29.6,30.0,30.6,31.0,31.2,31.6,32.2,33.0,34.0,34.2,34.6,35.0,35.2,35.4,35.4,35.6,35.2,35.0,34.6,34.2,33.8,33.4,33.2,33.0,32.6,32.2,32.2,31.8,31.8,31.4,31.0,30.4,30.2,29.8,29.2,28.8,28.6,28.4,28.0,27.8,27.2,26.8,26.8,26.4,26.2,26.0,25.8,25.6,25.4,25.2,25.2,25.2,25.2,25.2,25.4,25.2,25.0,24.8,24.4,23.6,23.2,22.8,22.8,22.6,22.2,22.2,22.2,22.0,22.0,21.8,21.8,21.6,21.6,21.4,21.4,21.4,21.2,21.0,20.8,20.6,20.2,20.2,20.2,20.2,20.2,20.2,20.2,20.4,21.0,21.0,21.2,21.2,21.2,21.2,21.4,21.6,21.6,22.0,22.0,22.4,22.8,23.0,23.2,23.6,23.8,24.0,24.2,24.6,25.0,25.2,25.2,25.6,26.0,26.2,26.2,26.2,26.4,26.8,27.2,27.4,27.4,27.4,27.6,27.8,27.8,28.0,28.2,28.4,28.2,28.2,27.8,27.6,27.4,27.4,27.6,27.6,27.6,27.4,27.2,26.8,26.4,26.2,26.2,26.0,26.0,26.0,25.8,25.4,24.8,24.6,24.6,24.2,24.0,23.6,23.2,22.8,22.8,22.6,22.0,21.8,21.6,21.2,21.0,20.6,20.6,20.4,20.6,20.6,20.4,20.2,20.0,19.6,19.4,19.2,19.0,18.8,18.4,17.8,17.8,17.4,17.2,17.4,17.6,17.6,17.8,17.8,17.8,17.8,18.2,18.4,18.4,18.4,18.4,18.2,17.8,18.0,18.2,18.2,18.6,18.8,19.2,19.6,19.8,19.8,20.0,20.4,20.4,20.6,20.6,20.6,20.4,20.0,19.6,19.6,19.2,19.2,18.8,18.6,18.4,18.6,18.6,18.8,19.0,19.0,19.2,19.2,19.4,19.4,19.6,19.8,20.0,20.0,19.8,19.6,19.2,18.6,17.8,17.4,17.0,16.8,16.8,16.6,16.4,15.8,15.6,15.4,15.0,14.8,14.6,14.6,14.6,14.4,15.2,15.2,15.4,15.4,15.4,15.4,15.2,15.0,15.0,14.8,15.0,15.2,15.2,15.4,15.6,15.6,15.6,15.8,15.8,15.6,15.6,15.6,15.6,15.6,15.6,15.6,15.6,15.4,15.2,15.2,15.2,15.0,14.6,14.4,14.4,14.2,14.4,14.4,14.4,14.4,14.4,14.4,14.4,14.2,14.2,14.4,14.4,14.6,14.6,14.8,15.2,15.4,15.2,15.2,15.2,15.0,15.0,15.0,15.4,15.6,16.0,16.0,16.4,16.6,16.8,17.0,17.2,17.4,17.4,17.6,17.6,17.6,17.6,17.0,16.4,15.8,15.2,14.6,14.4,14.0,13.6,13.6,13.6,13.6,13.6,13.8,13.6,13.6,13.6,13.6,13.8,13.8,14.0,14.0,14.2,14.2,14.4,14.4,14.8,14.8,14.6,15.0,15.0,14.6,14.4,14.4,14.2,14.0,14.0,14.0,13.8,13.8,13.6,13.6,13.6,13.6,13.6,13.4,13.4,13.4,13.4,13.2,13.0,13.0,13.2,12.8,12.8,13.0,12.8,13.0,13.2,13.0,13.0,13.0,13.0,13.0,13.2,13.2,13.0,13.2,13.4,13.4,13.4,13.6,14.0,14.2,14.2,13.6,13.4,13.2,13.0,12.8,13.0,12.8,12.6,12.6,12.8,12.8,12.6,12.6,12.6,12.6,12.6,12.8,13.2,13.2,13.2,13.6,13.6,14.0,14.0,14.0,13.6,13.6,13.4,13.0,13.0,13.0,12.8,13.4,13.6,13.6,13.6,13.6,13.8,13.8,13.6,14.2,14.0,14.0,14.6,14.8,14.2,14.0,14.0,14.8,14.8,15.0,15.2,15.0,15.0,15.0,14.8,14.8,14.8,15.0,15.2,15.6,15.8,16.0,16.2,16.8,16.8,16.0,15.8,15.6,15.6,15.6,15.6,15.2,15.2,15.2,15.2,15.0,15.0,14.8,14.4,14.2,14.0,14.0,14.2,14.2,14.2,14.2,13.6,13.4,13.4,14.0,14.4,14.6,14.6,14.6,14.8,14.8,15.0,15.0,14.8,14.8,15.0,14.8,14.8,14.8,15.0,15.2,15.6,15.6,15.6,15.8,16.0,16.2,16.2,16.2,16.2],
		"heartrate":[70,70,61,61,64,69,74,79,82,88,93,93,96,99,102,108,111,114,117,121,123,126,129,124,124,121,125,127,124,129,132,132,131,132,129,125,126,129,130,129,129,129,129,129,128,128,127,126,127,127,128,128,128,128,128,128,128,128,128,127,127,126,126,126,126,125,124,124,125,125,126,129,129,128,128,127,128,128,129,130,132,132,131,129,128,128,127,127,127,128,128,131,134,133,132,131,131,131,130,129,127,127,127,127,128,128,129,131,130,130,129,129,127,127,127,128,127,127,127,130,132,133,132,131,132,131,131,131,131,131,130,130,130,129,130,130,130,129,131,131,133,133,133,135,135,133,135,138,141,142,145,145,148,148,150,148,147,150,153,153,153,151,151,151,151,152,149,147,146,147,147,146,145,144,146,146,144,143,143,141,140,140,140,140,140,139,140,142,142,143,142,142,143,144,146,146,147,146,146,145,146,147,147,147,150,149,148,147,146,145,145,144,144,145,145,146,146,146,146,146,147,147,147,146,147,147,146,146,145,144,145,145,146,146,146,146,145,147,147,147,147,146,145,144,145,145,146,146,146,146,146,146,145,144,144,145,146,147,148,148,146,146,147,146,145,144,144,143,145,144,144,142,143,144,144,145,145,146,145,144,143,144,144,146,147,148,147,147,145,145,144,145,145,145,145,145,145,144,144,143,142,144,144,144,143,143,145,147,148,146,143,143,144,144,143,142,142,142,144,145,146,147,147,147,147,148,147,148,148,148,148,149,149,149,148,146,146,146,146,146,146,147,149,150,149,150,150,149,149,150,150,151,151,148,147,145,146,149,149,148,149,150,150,150,149,149,149,148,147,147,148,149,149,148,147,147,147,146,145,147,147,148,148,149,147,147,149,150,148,147,147,146,146,146,146,147,145,146,146,147,148,147,148,149,148,149,150,152,154,152,150,152,151,149,148,148,149,149,149,149,149,149,149,151,152,152,152,152,152,154,155,153,152,153,153,152,152,152,151,152,153,153,154,155,155,155,154,153,152,151,149,150,152,152,153,154,152,150,149,150,150,150,150,149,149,148,149,149,147,149,149,149,149,151,153,154,154,152,153,155,154,154,153,151,151,150,150,150,150,152,150,148,149,149,152,151,150,153,154,154,153,153,153,153,153,154,154,153,153,154,155,153,155,156,154,153,152,153,154,154,153,151,150,150,149,150,150,150,151,152,151,151,151,151,150,151,153,153,153,152,152,152,153,153,155,155,156,157,157,156,155,154,154,155,156,156,156,156],
		"cadence":[61,61,94,94,95,95,95,94,94,94,94,94,94,92,92,91,89,90,90,89,90,90,90,90,89,89,89,89,88,88,89,89,89,87,88,89,88,88,87,87,86,86,88,90,89,90,90,90,91,90,89,89,89,88,89,89,86,87,88,87,88,87,88,88,89,89,89,88,88,88,88,89,87,88,87,87,88,88,90,90,88,89,88,88,87,88,88,88,90,90,90,90,89,89,88,89,88,88,89,89,89,90,90,89,88,88,89,89,90,89,87,88,87,88,87,89,89,90,90,88,88,89,89,90,90,88,88,88,88,90,90,87,87,89,88,88,91,90,89,89,89,89,87,87,87,86,88,87,87,87,87,87,88,88,88,88,89,88,87,88,88,89,89,87,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,89,89,88,88,88,87,89,89,89,90,89,89,89,90,89,89,89,90,91,89,88,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,89,89,89,89,90,89,89,89,88,89,88,88,88,89,89,88,88,87,87,87,88,88,88,89,88,89,89,89,89,89,88,88,88,89,89,87,87,87,87,87,88,88,88,88,88,88,89,88,88,87,87,88,89,87,87,88,87,88,89,87,88,88,87,87,88,88,89,89,89,88,88,88,89,89,89,89,89,89,89,89,89,88,89,89,89,89,89,89,89,89,89,89,88,88,88,89,89,89,89,89,89,89,87,87,89,88,89,89,89,88,88,89,89,88,89,87,89,88,89,87,87,87,88,89,89,88,88,89,89,88,88,89,89,89,89,88,88,88,88,88,89,88,88,89,89,88,88,88,89,89,87,88,88,88,88,89,88,88,88,88,88,87,88,87,87,86,87,88,89,88,88,88,88,87,87,86,88,88,88,88,88,88,87,87,87,88,89,88,89,87,88,88,87,87,87,89,88,88,87,88,87,87,88,87,87,88,88,87,88,87,88,88,89,88,87,87,89,89,89,88,89,89,88,88,88,89,89,87,88,87,88,88,88,88,88,88,87,87,87,88,88,87,87,87,87,89,88,88,87,87,88,90,88,89,86,88,88,86,88,87,88,88,88,87,87,87,87,88,88,88,88,90,89,89,88,88,87,87,89,89,89,89,90,90,89,89,90,88,89,88,89,88,87,87,88,88,90,88,88,89,88,90,90,90,89,89,89,88,88,89,89,90,89,89,88,89,89,88,88,88,88,89,89,88,90,90,90,89,89,88,88,89,88,88,89,88,89,87]
	};
		
	var colTime = ['dataTime'].concat(window.dataJson.time);
	var col0 = ['data0'].concat(window.dataJson.distance);
	var col1 = ['data1'].concat(window.dataJson.altitude);
	var col2 = ['data2'].concat(window.dataJson.heartrate);
	var col3 = ['data3'].concat(window.dataJson.cadence);
	
	var chart = c3.generate({
		bindto: '#graphActivity',
		data: {
			x: 'data0',
			columns: [
				col0,
				col1,
				col2,
				col3,
			],
			type: 'line',
			names: {
				data1: 'Altitude',
				data2: 'Fréquence cardiaque',
				data3: 'Cadence',
			},
		},
		axis: {
			x: {
				padding: {left:0, right:0},
				show: false
			},
			y: {
				padding: {top:0, bottom:0},
				tick: {	
					format: function (d) { 
						return d + 'm';
					}
				}
			},
		},
		grid: {
			x: {
				lines: [
					{value: 1000, text: '1km'},
					{value: 2000, text: '2km'},
					{value: 3000, text: '3km'},
					{value: 4000, text: '4km'},
					{value: 5000, text: '5km'},
					{value: 6000, text: '6km'},
					{value: 7000, text: '7km'},
					{value: 8000, text: '8km'},
					{value: 9000, text: '9km'},
					{value: 10000, text: '10km'},
				]
			}
		},
		point: {
			show: false
		},
		tooltip: {
			format: {
				title: function (d) {
					var distance = distance = d / 1000;
					return 'Distance : ' + distance.toFixed(3) + ' km'
				},
				value: function (value, ratio, id) {
					switch (id) {
						case 'data1': //
							return value + 'm';
							break;
						case 'data2': //
							return value + 'bpm';
							break;
						case 'data3': //
							return (value*2) + 'ppm';
							break;
						default:
							return value;
					}
				}
			},
			contents: function (d, defaultTitleFormat, defaultValueFormat, color) {
				var 
					$$ = this, 
					config = $$.config, 
					CLASS = $$.CLASS,
					titleFormat = config.tooltip_format_title || defaultTitleFormat,
					nameFormat = config.tooltip_format_name || function (name) { return name; },
					valueFormat = config.tooltip_format_value || defaultValueFormat,
					text, 
					i, 
					title, 
					value, 
					name, 
					bgcolor;
				
				var index = 0;
					d.forEach(function(item) {
						index = item.index;
					});
					var time = window.dataJson.time[index];
					var timePrev = window.dataJson.time[index -1];
					var distance = window.dataJson.distance[index];
					var distancePrev = window.dataJson.distance[index - 1];
					var altitude = window.dataJson.altitude[index];
					var altitudePrev = window.dataJson.altitude[index - 1];
					time = Number(time);
					var h = Math.floor(time / 3600);
					var m = Math.floor(time % 3600 / 60);
					var s = Math.floor(time % 3600 % 60);

					var numH = h > 0 ? h + ':' : '';
					var numM = h > 0 || m > 0 ? (m < 10 ? '0' : '') + m + ':' : '';
					var numS = h > 0 || m > 0 || s > 0 ? (s < 10 ? '0' : '') + s : '';
					
					// CALCUL : Pente
					// di1 : Dénivelé : alt - alt-1
					di1 = altitude - altitudePrev;
					// di2 : Distance : dis - dis-1
					di2 = distance - distancePrev;
					prs = 100;
					ang = Math.asin(di1/di2);
					pte = Math.tan(ang)*100;
					ang = ang*180/3.1416;
					angle = Math.round(ang * 100)/100;
					pente = Math.round(pte * 100)/100;
					
					// CALCUL : Allure
					dur = time - timePrev;
					vit = di2 / dur;
					vit = vit * 3.6;
					vit = vit.toFixed(2);
					all = 1 / (vit / 60);
					allM = allS = 0;
					allM = Number.parseInt(all, 10);
					allS = ((all - allM) * 60).toFixed(0);
				
				for (i = 0; i < d.length; i++) {
					if (!(d[i] && (d[i].value || d[i].value === 0))) { continue; }

					if (!text) {
						title = titleFormat ? titleFormat(d[i].x) : d[i].x;
						text = "<table class='" + $$.CLASS.tooltip + "'>" + (title || title === 0 ? "<tr><th colspan='2'>" + title + "</th></tr>" : "");
					}
					name = nameFormat(d[i].name);
					value = valueFormat(d[i].value, d[i].ratio, d[i].id, d[i].index);
					bgcolor = $$.levelColor ? $$.levelColor(d[i].value) : color(d[i].id);

					text += "<tr class='" + CLASS.tooltipName + "-" + d[i].id + "'>";
					text += "<td class='name'><span style='background-color:" + bgcolor + "; border-radius: 5px;'></span>" + name + "</td>";
					text += "<td class='value'>" + value + "</td>";
					text += "</tr>";
				}

				text += "<tr class='" + CLASS.tooltipName + "-Surcharge" + "'>";
				text += "<td class='name'>Durée</td>";
				text += "<td class='value'>" + numH + numM + numS + "</td>";
				text += "</tr>"
				text += "<tr class='" + CLASS.tooltipName + "-Surcharge" + "'>";
				text += "<td class='name'>Pente</td>";
				text += "<td class='value'>" + pente + "%</td>";
				text += "</tr>"
				text += "<tr class='" + CLASS.tooltipName + "-Surcharge" + "'>";
				text += "<td class='name'>Vitesse</td>";
				text += "<td class='value'>" + vit + "km/h</td>";
				text += "</tr>"
				text += "<tr class='" + CLASS.tooltipName + "-Surcharge" + "'>";
				text += "<td class='name'>Allure</td>";
				text += "<td class='value'>" + allM + ':' + (allS < 10 ? '0' : '') + allS + "/km</td>";
				text += "</tr>"
				text += "</table>";
				return text;
			}
		},
		transition: {
			duration: 0
		}
	});
	
	$('#splits table tbody tr').mouseenter(function(){
		xMin = xMax = null;
		kmEnd = $(this).attr('data-km') * 1000;
		kmStart = kmEnd - 1000;
		window.dataJson.distance.forEach(function(value) {
			if (xMin == null && value >= kmStart) {
				xMin = value;
			}
			if (xMax == null && value >= kmEnd) {
				xMax = value;
			}
		});
		
		chart.regions([{axis:'x', start:xMin, end:xMax, class:'active-region'}]); // clears all regions, adds a region on x-axis from 4 to 12
	});
	$('#splits table').mouseleave(function() {
		chart.regions([]);
	});
};
var fnPageActivityAdd = function() {
	fnMenuNotification();
	fnUiDropdown();
	fnUiCalendarDate();
	fnUiCalendarTime();	
	
	var map = fnMapInit();
	
	var drawnItems = L.featureGroup().addTo(map);
	var drawControl = new L.Control.Draw({
		edit: {
			featureGroup: drawnItems,
			poly : {
				allowIntersection : false
			}
		},
		draw: {
			polyline: true,
			polygon: false,
			marker: false,
			rectangle: false,
			circle: false,
			circlemarker: false,
		}
	});

	map.addControl(drawControl);

	// Truncate value based on number of decimals
	var _round = function(num, len) {
		return Math.round(num*(Math.pow(10, len)))/(Math.pow(10, len));
	};
	// Generate popup content based on layer type
	// - Returns HTML string, or null if unknown object
	var getDistance = function(layer) {
		if (layer instanceof L.Polyline) {
			var latlngs = layer._defaultShape ? layer._defaultShape() : layer.getLatLngs(),
				distance = 0;
			if (latlngs.length < 2) {
				return distance;
			} else {
				for (var i = 0; i < latlngs.length-1; i++) {
					distance += latlngs[i].distanceTo(latlngs[i+1]);
				}
				return _round(distance, 0);
			}
		}
		return null;
	}
	var getPopupContent = function(layer) {
		if (layer instanceof L.Polyline) {
			var distance = getDistance(layer);
			if (distance == 0) {
				return "Distance: N/A";
			}
			return "Distance: "+distance+" m";
		}
		return null;
	};

	map.on(L.Draw.Event.CREATED, function(event) {
		var layer = event.layer;
		var content = getPopupContent(layer);
		if (content !== null) {
			layer.bindPopup(content);
				$('#distance').val(getDistance(layer));
		}
		drawnItems.addLayer(layer);
		
		drawControl.setDrawingOptions({
			polyline: false
		});
		map.removeControl(drawControl);
		map.addControl(drawControl);
	});
	map.on(L.Draw.Event.EDITED, function(event) {
		var layers = event.layers,
			content = null;
		layers.eachLayer(function(layer) {
			content = getPopupContent(layer);
			if (content !== null) {
				layer.setPopupContent(content);
				$('#distance').val(getDistance(layer));
			}
		});
	});
	map.on(L.Draw.Event.DELETED, function(event) {
		
		drawControl.setDrawingOptions({
			polyline: true
		});
		map.removeControl(drawControl);
		map.addControl(drawControl);
	});
};
var fnPageActivityImport = function() {
	fnMenuNotification();
	fnUiDropdown();
	fnUiTab();
};
var fnPageConnector = function() {
	fnMenuNotification();
	fnUiCheckbox();
	fnUiTable();
};
var fnPageDashboard = function() {
	fnMenuNotification();

	var redAlpha = d3.rgb(window.chartColors.red);
	redAlpha.opacity = 0.8;
	var blueAlpha8 = d3.rgb(window.chartColors.blue);
	blueAlpha8.opacity = 0.8;
	var blueAlpha5 = d3.rgb(window.chartColors.blue);
	blueAlpha5.opacity = 0.5;
	var greenAlpha5 = d3.rgb(window.chartColors.green);
	greenAlpha5.opacity = 0.5;
	var chart = c3.generate({
		bindto: '#graphActivities',
		data: {
			columns: [
				['data1', 3, 5, 2, 3, 8, 5, 2, 3],
				['data2', 98, 99.5, 100.5, 99, 97, 98.5, 97.5, 97],
			],
			type: 'bar',
			types: {
				data2: 'spline',
			},
			axes: {
				data1: 'y',
				data2: 'y2'
			},
			names: {
				data1: 'Activities',
				data2: 'Weight'
			},
		},
		color: {
			pattern: [redAlpha, blueAlpha8]
		},
		axis: {
			x: {
				type: 'category',
				categories: ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5', 'Week 6', 'Week 7', 'Week 8']
			},
			y: {
				max: 10,
				min: 0,
				padding: {top:0, bottom:0}
			},
			y2: {
				max: 110,
				min: 90,
				padding: {top:0, bottom:0}
			},
		},
		tooltip: {
			format: {
				title: function (d) { 
					return 'Week ' + (d+1);
				},
				value: function (value, ratio, id) {
					if (id === 'data2') {
						return value + ' kg';
					}
					return value;
				}
			}
		}
	});
	var chart = c3.generate({
		bindto: '#graphSleep',
		data: {
			columns: [
				['data1', 413, 244, 328, 331, 528, 453, 284],
				['data2', 29, 137, 22, 101, 25, 14, 131],
			],
			type: 'bar',
			groups: [
				['data1', 'data2']
			],
			names: {
				data1: 'Sommeil léger',
				data2: 'Sommeil profond',
			},
			order: null,
		},
		color: {
			pattern: [blueAlpha5, window.chartColors.blue]
		},
		axis: {
			x: {
				type: 'category',
				categories: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim']
			},
			y: {
				padding: {top:0, bottom:0},
				tick: {	
					values: [120, 240, 360, 480, 600, 720, 840, 960],
					format: function (d) { 
						var numHours = Math.floor( d / 60)
						return numHours + 'h';
					}
				}
			},
		},
		legend: {
			show: false
		},
		grid: {
			y: {
				lines: [
					{value: 420, text: '7h'},
				]
			}
		},
		tooltip: {
			format: {
				value: function (value, ratio, id) {
					var numMinSleep = value;
					var numHours = Math.floor( numMinSleep / 60);          
					var numMinutes = numMinSleep % 60;
					return numHours + 'h ' + (numMinutes > 0 ? (numMinutes < 10 ? '0' : '') + numMinutes + 'm' : '');
				}
			},
			contents: function (d, defaultTitleFormat, defaultValueFormat, color) {
				var 
					$$ = this, 
					config = $$.config, 
					CLASS = $$.CLASS,
					titleFormat = config.tooltip_format_title || defaultTitleFormat,
					nameFormat = config.tooltip_format_name || function (name) { return name; },
					valueFormat = config.tooltip_format_value || defaultValueFormat,
					text, 
					i, 
					title, 
					value, 
					name, 
					bgcolor,
					sumSleep = 0;
				
				for (i = 0; i < d.length; i++) {
					if (!(d[i] && (d[i].value || d[i].value === 0))) { continue; }

					if (!text) {
						title = titleFormat ? titleFormat(d[i].x) : d[i].x;
						text = "<table class='" + $$.CLASS.tooltip + "'>" + (title || title === 0 ? "<tr><th colspan='2'>" + title + "</th></tr>" : "");
					}
					sumSleep += d[i].value;
					name = nameFormat(d[i].name);
					value = valueFormat(d[i].value, d[i].ratio, d[i].id, d[i].index);
					bgcolor = $$.levelColor ? $$.levelColor(d[i].value) : color(d[i].id);

					text += "<tr class='" + CLASS.tooltipName + "-" + d[i].id + "'>";
					text += "<td class='name'><span style='background-color:" + bgcolor + "; border-radius: 5px;'></span>" + name + "</td>";
					text += "<td class='value'>" + value + "</td>";
					text += "</tr>";
				}

				text += "<tr class='" + CLASS.tooltipName + "-Surcharge" + "' style='text-align:center'>";
				text += "<td class='name'><strong>Sommeil</strong></td>";
				text += "<td class='value'>" + valueFormat(sumSleep) + "</td>";
				text += "</tr></table>";
				return text;
			}
		}
	});
	var chart = c3.generate({
		bindto: '#graphSteps',
		data: {
			columns: [
				['data1', 5000, 2680, 3480, 4345, 2586, 5000, 2750],
				['data2',  253, 0, 0, 0, 0, 750, 0],
			],
			type: 'bar',
			groups: [
				['data1', 'data2']
			],
			names: {
				data1: 'Steps',
				data2: 'Steps',
			},
			order: null,
		},
		color: {
			pattern: [greenAlpha5, window.chartColors.green]
		},
		axis: {
			x: {
				type: 'category',
				categories: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim']
			},
			y: {
				padding: {bottom:0},
				tick: {	
					values: [2000, 4000, 6000, 8000, 10000],
				}
			},
		},
		legend: {
			show: false
		},
		grid: {
			y: {
				lines: [
					{value: 5000, text: '5000'},
				]
			}
		},
		tooltip: {
			contents: function (d, defaultTitleFormat, defaultValueFormat, color) {
				var 
					$$ = this, 
					config = $$.config, 
					CLASS = $$.CLASS,
					titleFormat = config.tooltip_format_title || defaultTitleFormat,
					nameFormat = config.tooltip_format_name || function (name) { return name; },
					valueFormat = config.tooltip_format_value || defaultValueFormat,
					text, 
					i, 
					title, 
					value, 
					name, 
					bgcolor,
					sumSleep = 0;
				
				for (i = 0; i < d.length; i++) {
					if (!(d[i] && (d[i].value || d[i].value === 0))) { continue; }

					if (!text) {
						title = titleFormat ? titleFormat(d[i].x) : d[i].x;
						text = "<table class='" + $$.CLASS.tooltip + "'>" + (title || title === 0 ? "<tr><th colspan='2'>" + title + "</th></tr>" : "");
					}
					sumSleep += d[i].value;
				}

				text += "<tr class='" + CLASS.tooltipName + "-Surcharge" + "' style='text-align:center'>";
				text += "<td class='name'><strong>Steps</strong></td>";
				text += "<td class='value'>" + (sumSleep > 5000 ? '⭐' : '') + valueFormat(sumSleep) + (sumSleep > 5000 ? '⭐' : '') + "</td>";
				text += "</tr></table>";
				return text;
			}
		}
	});
	var chart = c3.generate({
		bindto: '#graphObjectives',
		data: {
			columns: [
				['data1', 2],
			],
			type: 'gauge',
			names: {
				data1: 'Objectives',
			},
		},
		gauge: {
			label: {
				format: function(value, ratio) {
					return value ;
				},
			},
			min: 0, 
			max: 10,
		},
		color: {
			pattern: [window.chartColors.purple]
		},
		legend: {
			show: false
		},
	});	
}
var fnPageFeed = function() {
	fnMenuNotification();
	fnUiDropdown();
};
var fnPageLogin = function() {
  $('.ui.form')
        .form({
          fields: {
            email: {
              identifier  : 'email',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your e-mail'
                },
                {
                  type   : 'email',
                  prompt : 'Please enter a valid e-mail'
                }
              ]
            },
            password: {
              identifier  : 'password',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your password'
                },
                {
                  type   : 'length[6]',
                  prompt : 'Your password must be at least 6 characters'
                }
              ]
            }
          }
        })
      ;
};
var fnPageParameters = function() {
	fnMenuNotification();
	fnUiDropdown();
	fnUiTab();
	
	$('.warning.icon').popup();
};
var fnPageProfile = function() {
	fnMenuNotification();
};
var fnPageWeightAdd = function() {
	fnMenuNotification();
	fnUiDropdown();
	fnUiCalendarDate();
	fnUiCalendarTime();	
};
var fnPageWellness = function() {
	fnMenuNotification();
	fnUiTab();

	var dataJson = [
  {
    "day": "2016-05-12",
    "count": 171
  },
  {
    "day": "2016-06-17",
    "count": 139
  },
  {
    "day": "2016-05-02",
    "count": 556
  },
  {
    "day": "2016-04-10",
    "count": 1
  },
  {
    "day": "2016-05-04",
    "count": 485
  },
  {
    "day": "2016-03-27",
    "count": 1
  },
  {
    "day": "2016-05-26",
    "count": 42
  },
  {
    "day": "2016-05-25",
    "count": 337
  },
  {
    "day": "2016-05-23",
    "count": 267
  },
  {
    "day": "2016-05-05",
    "count": 569
  },
  {
    "day": "2016-03-31",
    "count": 32
  },
  {
    "day": "2016-03-25",
    "count": 128
  },
  {
    "day": "2016-05-13",
    "count": 221
  },
  {
    "day": "2016-03-30",
    "count": 26
  },
  {
    "day": "2016-03-15",
    "count": 3
  },
  {
    "day": "2016-04-24",
    "count": 10
  },
  {
    "day": "2016-04-27",
    "count": 312
  },
  {
    "day": "2016-03-20",
    "count": 99
  },
  {
    "day": "2016-05-10",
    "count": 358
  },
  {
    "day": "2016-04-01",
    "count": 15
  },
  {
    "day": "2016-05-11",
    "count": 199
  },
  {
    "day": "2016-07-06",
    "count": 744
  },
  {
    "day": "2016-05-08",
    "count": 23
  },
  {
    "day": "2016-03-28",
    "count": 98
  },
  {
    "day": "2016-03-29",
    "count": 64
  },
  {
    "day": "2016-04-30",
    "count": 152
  },
  {
    "day": "2016-03-21",
    "count": 148
  },
  {
    "day": "2016-03-19",
    "count": 20
  },
  {
    "day": "2016-05-07",
    "count": 69
  },
  {
    "day": "2016-04-29",
    "count": 431
  },
  {
    "day": "2016-04-25",
    "count": 330
  },
  {
    "day": "2016-04-28",
    "count": 353
  },
  {
    "day": "2016-04-18",
    "count": 9
  },
  {
    "day": "2016-01-10",
    "count": 1
  },
  {
    "day": "2016-01-09",
    "count": 2
  },
  {
    "day": "2016-03-26",
    "count": 21
  },
  {
    "day": "2016-05-27",
    "count": 18
  },
  {
    "day": "2016-04-19",
    "count": 10
  },
  {
    "day": "2016-04-06",
    "count": 1
  },
  {
    "day": "2016-04-12",
    "count": 214
  },
  {
    "day": "2016-05-03",
    "count": 536
  },
  {
    "day": "2016-07-03",
    "count": 3
  },
  {
    "day": "2016-06-16",
    "count": 1
  },
  {
    "day": "2016-03-24",
    "count": 138
  },
  {
    "day": "2016-04-26",
    "count": 351
  },
  {
    "day": "2016-04-23",
    "count": 14
  },
  {
    "day": "2016-05-01",
    "count": 19
  },
  {
    "day": "2016-07-05",
    "count": 523
  },
  {
    "day": "2016-05-22",
    "count": 3
  },
  {
    "day": "2016-05-09",
    "count": 430
  },
  {
    "day": "2016-05-24",
    "count": 472
  },
  {
    "day": "2016-04-11",
    "count": 172
  },
  {
    "day": "2016-03-17",
    "count": 7
  },
  {
    "day": "2016-05-14",
    "count": 10
  },
  {
    "day": "2016-05-06",
    "count": 449
  },
  {
    "day": "2016-07-04",
    "count": 295
  },
  {
    "day": "2016-05-15",
    "count": 12
  },
  {
    "day": "2016-03-23",
    "count": 216
  },
  {
    "day": "2016-03-18",
    "count": 47
  },
  {
    "day": "2016-03-22",
    "count": 179
  },
  {
    "day": "2016-12-22",
    "count": 179
  },
  {
    "day": "2016-11-22",
    "count": 179
  }
];
    fnUiCalendarHeatmap('.calHeatmap', dataJson);
	
	
	var chart = c3.generate({
		bindto: '#graphTracking',
		data: {
			columns: [
				['data
				['data2',0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,0,0,0,10,20,0,],
				['data3',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
				['data
			],
			type: 'bar',
			types: {
				data4: 'line',
			},
			names: {
				data1: 'Steps',
				data2: 'Light Sleep',
				data3: 'Deep Sleep',
				data4: 'Heart Rate',
			},
			groups: [
				['data1','data2', 'data3']
			]
		},
		bar: {
			width: {
				ratio: 1
			}
		},
		subchart: {
			show: true
		},
		point: {
			show: false
		},
	});
	var chart = c3.generate({
		bindto: '#graphWeight',
		data: {
			columns: [
				['data1', 30, 200, 100, 400, 150, 250]
			],
			names: {
				data1: 'Weight',
			},
			type: 'spline'
		},
		point: {
			show: false
		},
	});

};